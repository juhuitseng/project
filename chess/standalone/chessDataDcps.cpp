//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: chessDataDcps.cpp
//  Source: chessDataDcps.idl
//  Generated: Thu Mar 30 23:13:52 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************

#include "chessDataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < chessData::Msg, struct MsgSeq_uniq_>;
#endif

const char * chessData::MsgTypeSupportInterface::_local_id = "IDL:chessData/MsgTypeSupportInterface:1.0";

chessData::MsgTypeSupportInterface_ptr chessData::MsgTypeSupportInterface::_duplicate (chessData::MsgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chessData::MsgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, chessData::MsgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chessData::MsgTypeSupportInterface_ptr chessData::MsgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   chessData::MsgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (chessData::MsgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < chessData::MsgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chessData::MsgTypeSupportInterface_ptr chessData::MsgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   chessData::MsgTypeSupportInterface_ptr result;
   result = dynamic_cast < chessData::MsgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chessData::MsgDataWriter::_local_id = "IDL:chessData/MsgDataWriter:1.0";

chessData::MsgDataWriter_ptr chessData::MsgDataWriter::_duplicate (chessData::MsgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chessData::MsgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, chessData::MsgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chessData::MsgDataWriter_ptr chessData::MsgDataWriter::_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataWriter_ptr result = NULL;
   if (p && p->_is_a (chessData::MsgDataWriter::_local_id))
   {
      result = dynamic_cast < chessData::MsgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chessData::MsgDataWriter_ptr chessData::MsgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataWriter_ptr result;
   result = dynamic_cast < chessData::MsgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chessData::MsgDataReader::_local_id = "IDL:chessData/MsgDataReader:1.0";

chessData::MsgDataReader_ptr chessData::MsgDataReader::_duplicate (chessData::MsgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chessData::MsgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, chessData::MsgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chessData::MsgDataReader_ptr chessData::MsgDataReader::_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataReader_ptr result = NULL;
   if (p && p->_is_a (chessData::MsgDataReader::_local_id))
   {
      result = dynamic_cast < chessData::MsgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chessData::MsgDataReader_ptr chessData::MsgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataReader_ptr result;
   result = dynamic_cast < chessData::MsgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * chessData::MsgDataReaderView::_local_id = "IDL:chessData/MsgDataReaderView:1.0";

chessData::MsgDataReaderView_ptr chessData::MsgDataReaderView::_duplicate (chessData::MsgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean chessData::MsgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, chessData::MsgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

chessData::MsgDataReaderView_ptr chessData::MsgDataReaderView::_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (chessData::MsgDataReaderView::_local_id))
   {
      result = dynamic_cast < chessData::MsgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

chessData::MsgDataReaderView_ptr chessData::MsgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   chessData::MsgDataReaderView_ptr result;
   result = dynamic_cast < chessData::MsgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



